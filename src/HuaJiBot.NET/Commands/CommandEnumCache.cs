using System.Diagnostics.CodeAnalysis;
using System.Reflection;

namespace HuaJiBot.NET.Commands;

/// <summary>
/// Generated cache for command enum information to replace reflection
/// This demonstrates how source generators could optimize performance
/// </summary>
public static class CommandEnumCache
{
    private static readonly Dictionary<
        Type,
        CommandArgumentEnumAttributeBase.EnumInfo[]
    > _enumCache = new();

    /// <summary>
    /// Fast enum info lookup that replaces reflection-based GetCustomAttribute calls
    /// </summary>
    public static bool TryGetEnumInfo<T>(string input, [NotNullWhen(true)] out object? value)
        where T : struct, Enum
    {
        value = null;

        // Fast path for common enums (this would be generated by source generator)
        // For now, just use standard enum parsing as fallback
        return Enum.TryParse<T>(input, true, out var result) && (value = result) != null;
    }

    /// <summary>
    /// Fast enum items lookup that replaces reflection
    /// </summary>
    public static CommandArgumentEnumAttributeBase.EnumInfo[] GetEnumItems<T>()
        where T : struct, Enum
    {
        var type = typeof(T);

        if (_enumCache.TryGetValue(type, out var cached))
        {
            return cached;
        }

        // Generate items using reflection for now (source generator would replace this)
        var reflectionItems = new List<CommandArgumentEnumAttributeBase.EnumInfo>();
        foreach (var value in Enum.GetValues<T>())
        {
            var key = Enum.GetName(value)!;
            var field = typeof(T).GetField(key);
            var attr = field?.GetCustomAttribute<CommandEnumItemAttribute>();
            var description = attr?.Description ?? key;
            var alias = attr?.Alias ?? key;
            reflectionItems.Add(
                new CommandArgumentEnumAttributeBase.EnumInfo(key, alias, description, value)
            );
        }

        var result = reflectionItems.ToArray();
        _enumCache[type] = result;
        return result;
    }
}

/// <summary>
/// Optimized command argument enum attribute that uses generated cache
/// </summary>
public class OptimizedCommandArgumentEnumAttribute<T> : CommandArgumentEnumAttributeBase
    where T : struct, Enum
{
    public OptimizedCommandArgumentEnumAttribute(string description)
        : base(description) { }

    public override bool TryParse(string input, [NotNullWhen(true)] out object? value)
    {
        return CommandEnumCache.TryGetEnumInfo<T>(input, out value);
    }

    protected override IEnumerable<CommandArgumentEnumAttributeBase.EnumInfo> AllEnumItems()
    {
        return CommandEnumCache.GetEnumItems<T>();
    }
}
